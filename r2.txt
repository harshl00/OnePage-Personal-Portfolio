To blink two alternate LEDs using a **Raspberry Pi**, we will use **GPIO pins** on the Raspberry Pi to control the LEDs, and a Python script to create the blinking effect.

Here’s a **step-by-step guide** that will walk you through setting up the LEDs and writing a Python program to blink them alternately.

---

### What You’ll Need:
1. **Raspberry Pi** (any model with GPIO support)
2. **2 LEDs** (different colors will help you see the difference easily)
3. **2 Resistors** (220-ohm resistors to protect the LEDs)
4. **Jumper Wires** (for connecting the components)
5. **Breadboard** (optional, but helps to organize the wiring)

---

### Step 1: Wiring the LEDs to Raspberry Pi

#### GPIO Pins Explanation:
- The **GPIO pins** on the Raspberry Pi are used to control external components like LEDs.
- We will use **GPIO pin 17** for LED1 and **GPIO pin 27** for LED2.
- Both LEDs will have one leg connected to a **resistor**, and the resistor will connect to the **GND (ground)** pin on the Raspberry Pi.

#### Wiring Instructions:
1. **Connect LED1**:
   - Connect the **long leg (positive)** of LED1 to **GPIO pin 17** (6th pin from the left on the outer row of the GPIO header).
   - Connect the **short leg (negative)** of LED1 to **one end of a 220-ohm resistor**.
   - Connect the **other end of the resistor** to the **GND pin** (3rd pin from the left on the outer row).
   
2. **Connect LED2**:
   - Connect the **long leg (positive)** of LED2 to **GPIO pin 27** (13th pin from the left on the outer row).
   - Connect the **short leg (negative)** of LED2 to **one end of another 220-ohm resistor**.
   - Connect the **other end of this resistor** to the **same GND pin**.

Your connections should look like this:
- **GPIO pin 17** → **LED1 (positive)** → **Resistor** → **GND**.
- **GPIO pin 27** → **LED2 (positive)** → **Resistor** → **GND**.

---

### Step 2: Install the Necessary Python Libraries

To control the GPIO pins using Python, you need the **RPi.GPIO** library. It comes pre-installed with Raspbian OS, but if you don’t have it, you can install it using:

```bash
sudo apt update
sudo apt install python3-rpi.gpio
```

---

### Step 3: Writing the Python Code to Blink the LEDs

Now, we’ll write the Python program to blink the two LEDs **alternately**. This means when **LED1** is ON, **LED2** will be OFF, and when **LED2** is ON, **LED1** will be OFF.

#### Python Code to Blink LEDs Alternately:

```python
import RPi.GPIO as GPIO  # Import the GPIO library to control the pins
import time              # Import the time library to add delays

# Set up GPIO using BCM numbering (this refers to the pin numbers on the Broadcom chip)
GPIO.setmode(GPIO.BCM)

# Define the GPIO pins for the LEDs
led1_pin = 17  # Pin connected to LED1
led2_pin = 27  # Pin connected to LED2

# Set up the GPIO pins as output
GPIO.setup(led1_pin, GPIO.OUT)
GPIO.setup(led2_pin, GPIO.OUT)

try:
    while True:  # Infinite loop to keep blinking the LEDs
        # Turn on LED1 and turn off LED2
        GPIO.output(led1_pin, GPIO.HIGH)  # LED1 ON
        GPIO.output(led2_pin, GPIO.LOW)   # LED2 OFF
        time.sleep(1)                     # Wait for 1 second

        # Turn off LED1 and turn on LED2
        GPIO.output(led1_pin, GPIO.LOW)   # LED1 OFF
        GPIO.output(led2_pin, GPIO.HIGH)  # LED2 ON
        time.sleep(1)                     # Wait for 1 second

except KeyboardInterrupt:
    # Clean up the GPIO pins on exit
    GPIO.cleanup()
```

---

### Explanation of the Code:

1. **Libraries**:
   - `RPi.GPIO`: This library allows us to control the GPIO pins on the Raspberry Pi.
   - `time`: Used to create a delay (pause) between LED blinks.

2. **GPIO Setup**:
   - `GPIO.setmode(GPIO.BCM)` sets the pin numbering system to **BCM** mode (which refers to the actual GPIO numbers, like GPIO17, GPIO27, etc.).
   - We define the pins for **LED1** and **LED2** using `led1_pin` and `led2_pin`.

3. **Setup the Pins**:
   - `GPIO.setup(led1_pin, GPIO.OUT)` sets GPIO pin 17 as an output for **LED1**.
   - `GPIO.setup(led2_pin, GPIO.OUT)` sets GPIO pin 27 as an output for **LED2**.

4. **Blinking the LEDs**:
   - Inside the infinite `while` loop:
     - We first turn **LED1 ON** (`GPIO.output(led1_pin, GPIO.HIGH)`) and **LED2 OFF** (`GPIO.output(led2_pin, GPIO.LOW)`), then wait for **1 second** (`time.sleep(1)`).
     - After that, we turn **LED1 OFF** and **LED2 ON**, wait for another second, and repeat the cycle.

5. **Graceful Exit**:
   - The `try-except` block allows us to stop the program using `Ctrl + C` and clean up the GPIO pins by running `GPIO.cleanup()`. This resets the GPIO pins so that they can be used by other programs afterward.

---

### Step 4: Running the Python Code

1. **Open the Terminal** on your Raspberry Pi.
2. **Navigate** to the folder where you saved the Python script (if saved as `blink_led.py`):
   ```bash
   cd /path/to/your/script
   ```
3. **Run the Script**:
   ```bash
   sudo python3 blink_led.py
   ```
   - The `sudo` command is necessary to access the GPIO pins.
   - You should see **LED1** and **LED2** alternately blinking with a 1-second delay between them.

4. **Stop the Program**:
   - You can stop the program at any time by pressing **Ctrl + C**.

---

### Conclusion:

Now you have a complete setup where two LEDs blink alternately on your Raspberry Pi using GPIO pins. If you need any clarification, feel free to ask!
