program 1->>>>>>>>>
Write an Arduino program to detect obstacle  
using IR sensor and display the result on the serial monitor


Open Tinkercad and create a new circuit.
Drag an Arduino Uno onto the workspace.
Drag an IR sensor onto the workspace.
Connect the VCC of the IR sensor to the 5V of the Arduino using a jumper wire.
Connect the GND of the IR sensor to the GND of the Arduino using a jumper wire.
Connect the OUT pin of the IR sensor to digital pin 2 of the Arduino using a jumper wire.
(Optional) You can add LEDs or a buzzer to visualize the detection if desired.



// Define the pin for the IR sensor
const int irSensorPin = 2;

void setup() {
  // Start the Serial communication
  Serial.begin(9600);
  
  // Set the IR sensor pin as input
  pinMode(irSensorPin, INPUT);
}

void loop() {
  // Read the state of the IR sensor
  int sensorValue = digitalRead(irSensorPin);
  
  // Check if the sensor detects an obstacle
  if (sensorValue == LOW) { // Typically LOW means an obstacle is detected
    Serial.println("Obstacle Detected!");
  } else {
    Serial.println("No Obstacle.");
  }
  
  // Wait a moment before the next reading
  delay(500);
}




program 2->>>>>


1. Servo Motor Control Using a Potentiometer on Tinkercad
Setup in Tinkercad:
Add Components:

Add an Arduino Uno from the components menu.
Add a Servo motor.
Add a Potentiometer.
Wiring:

Servo Motor:

Connect GND of the servo to GND on the Arduino.
Connect VCC of the servo to 5V on the Arduino.
Connect the signal pin of the servo to pin 9 on the Arduino.
Potentiometer:

Connect GND of the potentiometer to GND on the Arduino.
Connect VCC of the potentiometer to 5V on the Arduino.
Connect the middle pin (signal) of the potentiometer to A0 on the Arduino.'

#include <Servo.h>

Servo myServo;  // Create Servo object
int potPin = A0; // Analog pin for potentiometer
int potValue;    // Store potentiometer value
int servoPos;    // Store servo position

void setup() {
  myServo.attach(9);  // Attach servo to pin 9
  Serial.begin(9600); // Start serial communication
}

void loop() {
  potValue = analogRead(potPin);                // Read potentiometer
  servoPos = map(potValue, 0, 1023, 0, 180);    // Map pot value to servo position
  myServo.write(servoPos);                      // Set servo position
  
  // Print the potentiometer and servo position values
  Serial.print("Potentiometer: ");
  Serial.print(potValue);
  Serial.print(" | Servo Position: ");
  Serial.println(servoPos);
  
  delay(20);  // Wait before next loop
}


2. Servo Motor Control Without a Potentiometer on Tinkercad
Setup in Tinkercad:
Add Components:

Add an Arduino Uno.
Add a Servo motor.
Wiring:

Servo Motor:
Connect GND of the servo to GND on the Arduino.
Connect VCC of the servo to 5V on the Arduino.
Connect the signal pin of the servo to pin 9 on the Arduino.
Code (Tinkercad-Compatible):



#include <Servo.h>

Servo myServo;  // Create Servo object
int servoPos = 0;  // Initialize position

void setup() {
  myServo.attach(9); // Attach servo to pin 9
  Serial.begin(9600); // Start serial communication
}

void loop() {
  // Move servo from 0 to 180 degrees
  for (servoPos = 0; servoPos <= 180; servoPos++) {
    myServo.write(servoPos); // Move to the position
    Serial.print("Servo Position: ");
    Serial.println(servoPos);
    delay(20); // Wait before next position
  }
  
  // Move servo from 180 to 0 degrees
  for (servoPos = 180; servoPos >= 0; servoPos--) {
    myServo.write(servoPos); // Move to the position
    Serial.print("Servo Position: ");
    Serial.println(servoPos);
    delay(20); // Wait before next position
  }

  delay(1000); // Pause before next loop
}



program 3->>>>


Simulating an Interactive Traffic System with Arduino for Cars and Pedestrians Controlled by Push Buttons (on Tinkercad)
We will create an interactive traffic light system where:

Cars and pedestrians are controlled by push buttons.
The system will have traffic lights for cars (Red, Yellow, Green).
There will be a pedestrian crossing light (Red and Green).
Push buttons are used to trigger pedestrian crossing, with traffic stopping for cars and allowing pedestrians to cross.
Components Needed:
Arduino Uno
2 Push Buttons (one for pedestrians and one for resetting or triggering car flow)
3 LEDs for car traffic light (Red, Yellow, Green)
2 LEDs for pedestrian traffic light (Red, Green)
Resistors (220 ohms) for each LED
Jumper wires and a breadboard (optional)
Wiring the Components:
1. Car Traffic Lights (3 LEDs):
Connect Green LED to pin 8.
Connect Yellow LED to pin 9.
Connect Red LED to pin 10.
2. Pedestrian Traffic Lights (2 LEDs):
Connect Red pedestrian LED to pin 11.
Connect Green pedestrian LED to pin 12.
3. Push Buttons:
Pedestrian push button: Connect one side to pin 2 and the other side to GND (with a pull-up resistor).
Car flow button: Connect one side to pin 3 and the other side to GND (with a pull-up resistor).
Tinkercad Circuit Layout:
Use 220Î© resistors for each LED.
Set up the buttons with a pull-down resistor to ensure they register proper states.
Code Explanation:
The pedestrian button allows pedestrians to stop car traffic and cross safely.
The car button can reset the car lights or control the flow of traffic.
LEDs are used to indicate the traffic light status for cars and pedestrians.
The system operates based on button presses, switching between allowing cars to move or stopping them for pedestrians.
Code (Tinkercad-Compatible):




// Pin assignments for LEDs
const int carGreen = 8;
const int carYellow = 9;
const int carRed = 10;
const int pedRed = 11;
const int pedGreen = 12;

// Pin assignments for buttons
const int pedButton = 2;
const int carButton = 3;

int pedButtonState = 0;  // Variable for storing pedestrian button state
int carButtonState = 0;  // Variable for storing car button state

void setup() {
  // Set the traffic light LEDs as outputs
  pinMode(carGreen, OUTPUT);
  pinMode(carYellow, OUTPUT);
  pinMode(carRed, OUTPUT);
  pinMode(pedRed, OUTPUT);
  pinMode(pedGreen, OUTPUT);
  
  // Set buttons as inputs
  pinMode(pedButton, INPUT_PULLUP);
  pinMode(carButton, INPUT_PULLUP);
  
  // Initially, cars can move (green for cars, red for pedestrians)
  digitalWrite(carGreen, HIGH);
  digitalWrite(carYellow, LOW);
  digitalWrite(carRed, LOW);
  digitalWrite(pedRed, HIGH);
  digitalWrite(pedGreen, LOW);
  
  // Start serial communication for debugging
  Serial.begin(9600);
}

void loop() {
  // Read button states
  pedButtonState = digitalRead(pedButton);
  carButtonState = digitalRead(carButton);
  
  // If pedestrian button is pressed
  if (pedButtonState == LOW) {
    // Stop cars and allow pedestrians to cross
    Serial.println("Pedestrian button pressed. Stopping cars...");
    stopCarsForPedestrians();
  }
  
  // If car button is pressed (optional: can use to reset or control car flow)
  if (carButtonState == LOW) {
    Serial.println("Car button pressed. Resetting traffic lights...");
    allowCarsToMove();
  }
}

void stopCarsForPedestrians() {
  // Turn car red light on, stop cars
  digitalWrite(carGreen, LOW);
  digitalWrite(carYellow, LOW);
  digitalWrite(carRed, HIGH);
  
  // Turn pedestrian green light on, allow pedestrians to cross
  digitalWrite(pedRed, LOW);
  digitalWrite(pedGreen, HIGH);
  
  delay(5000);  // Keep pedestrian light green for 5 seconds
  
  // Flash yellow light for cars (warning)
  digitalWrite(carRed, LOW);
  digitalWrite(carYellow, HIGH);
  delay(2000);
  
  // After crossing, reset the lights
  allowCarsToMove();
}

void allowCarsToMove() {
  // Turn on car green light, let cars move
  digitalWrite(carGreen, HIGH);
  digitalWrite(carYellow, LOW);
  digitalWrite(carRed, LOW);
  
  // Turn pedestrian red light on, stop pedestrians
  digitalWrite(pedRed, HIGH);
  digitalWrite(pedGreen, LOW);
}


How the System Works:
Initial state:

Cars are allowed to move (Green LED ON for cars, Red LED ON for pedestrians).
Pedestrians must wait (Green pedestrian light OFF).
When pedestrian button is pressed:

Cars are stopped (Red LED ON for cars), and pedestrians can cross (Green LED ON for pedestrians).
The system holds this state for 5 seconds, allowing pedestrians to safely cross.
Afterward, the car yellow light flashes as a warning, and then the car lights reset to allow cars to move again.
When car button is pressed (optional):

This button can be used to reset the system or manually allow cars to move.
Steps for Running the Simulation in Tinkercad:
Create the circuit: Add the Arduino, LEDs, resistors, and push buttons in your Tinkercad workspace. Wire them as described.

Copy the code: Paste the provided code into the code editor in Tinkercad.

Start the simulation: Click "Start Simulation" in Tinkercad.

Initially, cars will be allowed to move.
Press the pedestrian button (pin 2) to stop car traffic and allow pedestrians to cross.
Press the car button (pin 3) to reset the system manually if needed.
Monitor: You can also view status messages in the Serial Monitor in Tink



program 4->>>>
Arduino Program to Implement Blinking of Odd & Even LEDs
This program will blink odd and even LEDs alternatively. Odd LEDs will blink first, followed by even LEDs. You can set up multiple LEDs on your Arduino and assign them to odd and even pins.

Components Needed:
Arduino Uno
6 LEDs (you can add more if needed)
Resistors (220 ohms) for each LED
Jumper wires
Breadboard (optional)
Setup:
Odd LEDs will be connected to pins 3, 5, 7.
Even LEDs will be connected to pins 2, 4, 6.
Resistors (220 ohms) will be connected in series with each LED to limit the current.
Wiring:
Connect each LED's anode (long leg) to the respective pin on the Arduino.
Connect each LED's cathode (short leg) to GND through a 220-ohm resistor.
Example:

LED 1 (Odd) connected to pin 3
LED 2 (Even) connected to pin 2
LED 3 (Odd) connected to pin 5
LED 4 (Even) connected to pin 4
LED 5 (Odd) connected to pin 7
LED 6 (Even) connected to pin 6
Code for Blinking Odd and Even LEDs:


// Define pins for Odd and Even LEDs
int oddLEDs[] = {3, 5, 7};  // Odd LEDs
int evenLEDs[] = {2, 4, 6}; // Even LEDs
int delayTime = 500;         // Delay time for blinking (milliseconds)

void setup() {
  // Set Odd LED pins as outputs
  for (int i = 0; i < 3; i++) {
    pinMode(oddLEDs[i], OUTPUT);
  }

  // Set Even LED pins as outputs
  for (int i = 0; i < 3; i++) {
    pinMode(evenLEDs[i], OUTPUT);
  }
}

void loop() {
  // Turn ON Odd LEDs and OFF Even LEDs
  for (int i = 0; i < 3; i++) {
    digitalWrite(oddLEDs[i], HIGH);   // Turn ON Odd LEDs
    digitalWrite(evenLEDs[i], LOW);   // Turn OFF Even LEDs
  }
  delay(delayTime); // Wait for delay time

  // Turn ON Even LEDs and OFF Odd LEDs
  for (int i = 0; i < 3; i++) {
    digitalWrite(oddLEDs[i], LOW);    // Turn OFF Odd LEDs
    digitalWrite(evenLEDs[i], HIGH);  // Turn ON Even LEDs
  }
  delay(delayTime); // Wait for delay time
}


Arduino Program to Implement Blinking of Odd & Even LEDs
This program will blink odd and even LEDs alternatively. Odd LEDs will blink first, followed by even LEDs. You can set up multiple LEDs on your Arduino and assign them to odd and even pins.

Components Needed:
Arduino Uno
6 LEDs (you can add more if needed)
Resistors (220 ohms) for each LED
Jumper wires
Breadboard (optional)
Setup:
Odd LEDs will be connected to pins 3, 5, 7.
Even LEDs will be connected to pins 2, 4, 6.
Resistors (220 ohms) will be connected in series with each LED to limit the current.
Wiring:
Connect each LED's anode (long leg) to the respective pin on the Arduino.
Connect each LED's cathode (short leg) to GND through a 220-ohm resistor.
Example:

LED 1 (Odd) connected to pin 3
LED 2 (Even) connected to pin 2
LED 3 (Odd) connected to pin 5
LED 4 (Even) connected to pin 4
LED 5 (Odd) connected to pin 7
LED 6 (Even) connected to pin 6
Code for Blinking Odd and Even LEDs:
cpp
Copy code
// Define pins for Odd and Even LEDs
int oddLEDs[] = {3, 5, 7};  // Odd LEDs
int evenLEDs[] = {2, 4, 6}; // Even LEDs
int delayTime = 500;         // Delay time for blinking (milliseconds)

void setup() {
  // Set Odd LED pins as outputs
  for (int i = 0; i < 3; i++) {
    pinMode(oddLEDs[i], OUTPUT);
  }

  // Set Even LED pins as outputs
  for (int i = 0; i < 3; i++) {
    pinMode(evenLEDs[i], OUTPUT);
  }
}

void loop() {
  // Turn ON Odd LEDs and OFF Even LEDs
  for (int i = 0; i < 3; i++) {
    digitalWrite(oddLEDs[i], HIGH);   // Turn ON Odd LEDs
    digitalWrite(evenLEDs[i], LOW);   // Turn OFF Even LEDs
  }
  delay(delayTime); // Wait for delay time

  // Turn ON Even LEDs and OFF Odd LEDs
  for (int i = 0; i < 3; i++) {
    digitalWrite(oddLEDs[i], LOW);    // Turn OFF Odd LEDs
    digitalWrite(evenLEDs[i], HIGH);  // Turn ON Even LEDs
  }
  delay(delayTime); // Wait for delay time
}
How It Works:
Odd LEDs (connected to pins 3, 5, 7) will turn ON first while even LEDs (connected to pins 2, 4, 6) will remain OFF.
After a delay (set by delayTime), even LEDs will turn ON while odd LEDs turn OFF.
This process repeats continuously, creating an alternating blinking effect between odd and even LEDs.
Steps for Running the Program:
Set up the LEDs on your Tinkercad workspace or real Arduino based on the pin assignments provided.
Copy and paste the code into your Arduino IDE (or Tinkercad code editor).
Upload the code to your Arduino and start the simulation (or observe the physical blinking if using a real board).
This basic setup can be extended by adding more LEDs, modifying the delay time, or even implementing different patterns!




program 5 ->>>>
To control two LEDs using a push button, we will implement the following behavior:

LED1 will turn ON when the button is pressed.
LED2 will turn OFF when the button is released.
Components Needed:
Arduino Uno
2 LEDs (LED1 and LED2)
1 Push Button
Resistors (220 ohms for each LED)
Jumper wires
Breadboard (optional)
Circuit Diagram:
LED1 connected to pin 8.
LED2 connected to pin 9.
Push button connected to pin 2 (with a pull-down resistor).
Wiring the Components:
Connect the anode (long leg) of LED1 to pin 8 through a 220-ohm resistor.
Connect the anode (long leg) of LED2 to pin 9 through a 220-ohm resistor.
Connect the cathode (short leg) of both LEDs to GND.
Connect one terminal of the push button to pin 2.
Connect the other terminal of the push button to GND with a pull-down resistor, or use INPUT_PULLUP to internally pull the input to HIGH when the button is not pressed.
Arduino Code:
cpp


// Define the pin numbers for LEDs and button
const int buttonPin = 2;  // Push button connected to pin 2
const int led1Pin = 8;    // LED1 connected to pin 8
const int led2Pin = 9;    // LED2 connected to pin 9

void setup() {
  // Set the LED pins as OUTPUT
  pinMode(led1Pin, OUTPUT);
  pinMode(led2Pin, OUTPUT);
  
  // Set the button pin as INPUT
  pinMode(buttonPin, INPUT_PULLUP);  // Using internal pull-up resistor
}

void loop() {
  // Read the state of the button
  int buttonState = digitalRead(buttonPin);
  
  // Check if the button is pressed (LOW due to INPUT_PULLUP)
  if (buttonState == LOW) {
    // Button is pressed: turn ON LED1 and turn OFF LED2
    digitalWrite(led1Pin, HIGH);
    digitalWrite(led2Pin, LOW);
  } else {
    // Button is released: turn OFF LED1 and turn ON LED2
    digitalWrite(led1Pin, LOW);
    digitalWrite(led2Pin, HIGH);
  }
}


How the Program Works:
The button state is continuously checked in the loop().
When the button is pressed (LOW because of the INPUT_PULLUP configuration), LED1 turns ON and LED2 turns OFF.
When the button is released (HIGH), LED1 turns OFF and LED2 turns ON.
Steps to Simulate on Tinkercad:
Set up the circuit in Tinkercad by wiring the two LEDs, push button, and resistors as described.
Copy and paste the code into the code editor in Tinkercad.
Click Start Simulation.
When you press the button, LED1 should turn ON and LED2 should turn OFF.
When you release the button, LED1 should turn OFF and LED2 should turn ON.
This is a simple demonstration of controlling two LEDs with a single push button, but the logic can be extended to more complex scenarios depending on your needs. Let me know if you need any further clarification!




program 6->>
Motion Detection Using PIR Sensor with Arduino
This project interfaces a PIR (Passive Infrared) sensor with an Arduino Uno to detect motion and display the result on the serial monitor.

Components Needed:
Arduino Uno
PIR Sensor
Jumper Wires
Breadboard (optional)
PIR Sensor Pinout:
VCC: Connects to 5V of Arduino.
GND: Connects to Ground (GND).
OUT: Connects to a digital pin on the Arduino (we'll use pin 2).
Circuit Setup:
Connect the VCC pin of the PIR sensor to the 5V pin on the Arduino.
Connect the GND pin of the PIR sensor to the GND on the Arduino.
Connect the OUT pin of the PIR sensor to pin 2 on the Arduino.
Wiring:
PIR VCC â Arduino 5V
PIR GND â Arduino GND
PIR OUT â Arduino Pin 2

// Define the PIR sensor output pin
const int pirSensorPin = 2;  // PIR sensor output connected to pin 2
int pirState = LOW;          // Variable to store PIR sensor state

void setup() {
  // Start the serial communication at 9600 baud rate
  Serial.begin(9600);

  // Set the PIR sensor pin as an input
  pinMode(pirSensorPin, INPUT);
}

void loop() {
  // Read the value from the PIR sensor
  int sensorValue = digitalRead(pirSensorPin);
  
  // Check if motion is detected
  if (sensorValue == HIGH) {
    // Motion detected
    if (pirState == LOW) {
      // Print motion detected message
      Serial.println("Motion Detected!");
      pirState = HIGH;
    }
  } else {
    // No motion detected
    if (pirState == HIGH) {
      // Print no motion detected message
      Serial.println("No Motion.");
      pirState = LOW;
    }
  }
  
  // Short delay to prevent spamming the serial monitor
  delay(500);
}


How the Code Works:
PIR Sensor Pin Setup: The PIR sensor is connected to pin 2 and is continuously monitored.
Reading the Sensor: The program uses digitalRead() to check the OUT pin of the PIR sensor. When motion is detected, the sensor sends a HIGH signal.
Serial Output:
If motion is detected, the message "Motion Detected!" is printed to the serial monitor.
If no motion is detected, "No Motion." is displayed.
How to Test:
Connect the circuit as per the wiring diagram.
Upload the code to your Arduino.
Open the Serial Monitor in the Arduino IDE.
Wave your hand or move in front of the PIR sensor.
The Serial Monitor will display "Motion Detected!" whenever motion is detected.
It will display "No Motion." when no motion is detected after the sensor resets.
How the PIR Sensor Works:
The PIR sensor detects changes in infrared radiation (heat). When a person or object moves in front of the sensor, the sensor's output pin goes HIGH, indicating motion.
The pirState variable is used to ensure that the messages are only printed when there is a change in the detection state (either from no motion to motion or from motion to no motion).
Simulation on Tinkercad:
Set up the circuit in Tinkercad by connecting the PIR sensor and the Arduino as described.
Copy and paste the code into the code editor in Tinkercad.
Start the simulation. The Serial Monitor will display "Motion Detected!" when the PIR sensor detects movement.
Let me know if you need further assistance!



program 7->>>>

No worries! Iâll explain this step-by-step, as clearly as possible. Letâs dive into how to make 4 LEDs light up one by one (scrolling effect) using an Arduino Uno.

Objective:
We will connect 4 LEDs to the Arduino, and make them light up in a scrolling sequence, turning on one by one in a loop.

What You Need:
Arduino Uno: This is the main board that will control everything.
4 LEDs: Light-emitting diodes that we will light up in sequence.
4 Resistors: These limit the current going to the LEDs to protect them. Use 220-ohm resistors.
Jumper Wires: These are used to connect the LEDs, resistors, and Arduino.
Breadboard (optional): This is useful to organize your components, but you can directly connect everything if you donât have one.
Components Breakdown:
Arduino Pins: These are the little holes on the Arduino board where you connect wires. We will use pins 8, 9, 10, and 11 for the 4 LEDs.
LED: Each LED has two legs. The longer leg (positive) goes to the Arduino, and the shorter leg (negative) connects to ground (GND) through a resistor.
Resistor: It will be connected to the shorter leg of the LED, and then to the GND pin on the Arduino.
How to Connect the Components:
Identify the pins on the Arduino: Look at your Arduino board. Youâll see a section marked DIGITAL with numbers like 0, 1, 2, etc. We will use pins 8, 9, 10, and 11 for this project.

Wiring the LEDs:

LED1:
Connect the long leg (positive) of LED1 to pin 8.
Connect the short leg (negative) of LED1 to one end of a resistor.
Connect the other end of the resistor to GND (ground, itâs the third pin from the left in the row marked "POWER").
LED2:
Connect the long leg (positive) of LED2 to pin 9.
Connect the short leg (negative) of LED2 to one end of a resistor.
Connect the other end of the resistor to GND.
LED3:
Connect the long leg (positive) of LED3 to pin 10.
Connect the short leg (negative) of LED3 to one end of a resistor.
Connect the other end of the resistor to GND.
LED4:
Connect the long leg (positive) of LED4 to pin 11.
Connect the short leg (negative) of LED4 to one end of a resistor.
Connect the other end of the resistor to GND.
Power:

The Arduino gets power either from the USB cable connected to your computer or from a separate power supply.


// Define which pins are connected to the LEDs
const int ledPins[] = {8, 9, 10, 11};  // The 4 LEDs are connected to pins 8, 9, 10, and 11.
const int numLEDs = 4;  // Total number of LEDs we are using.
const int delayTime = 300;  // This is the time (in milliseconds) between lighting up each LED.

void setup() {
  // Set each pin connected to an LED as an OUTPUT
  for (int i = 0; i < numLEDs; i++) {
    pinMode(ledPins[i], OUTPUT);  // Telling Arduino these pins will control LEDs
  }
}

void loop() {
  // Scroll LEDs from left to right (LED1 -> LED4)
  for (int i = 0; i < numLEDs; i++) {
    digitalWrite(ledPins[i], HIGH);   // Turn ON the LED connected to pin
    delay(delayTime);                 // Wait for the delay time
    digitalWrite(ledPins[i], LOW);    // Turn OFF the LED after delay
  }

  // Scroll LEDs from right to left (LED4 -> LED1)
  for (int i = numLEDs - 1; i >= 0; i--) {
    digitalWrite(ledPins[i], HIGH);   // Turn ON the LED connected to pin
    delay(delayTime);                 // Wait for the delay time
    digitalWrite(ledPins[i], LOW);    // Turn OFF the LED after delay
  }
}


What the Code Does:
Defining Pins:

We tell the Arduino which pins are connected to the LEDs using const int ledPins[] = {8, 9, 10, 11};.
Setup Function:

This part of the code runs once when the Arduino is powered on.
pinMode() tells the Arduino that pins 8, 9, 10, and 11 are outputs (sending electricity to the LEDs).
Loop Function:

This part runs forever in a loop. It makes the LEDs scroll continuously.
First Loop: We light up the LEDs one by one from left to right (LED1 to LED4).
Second Loop: We light up the LEDs from right to left (LED4 to LED1).
The delay() function makes the LEDs pause before the next one lights up. You can change the number in delayTime to make it faster or slower (1000 = 1 second).
Steps to Execute:
Open Tinkercad: If you're using Tinkercad, set up your Arduino, LEDs, and resistors on the breadboard according to the wiring described above.

Upload the Code:

In Tinkercad, open the code editor.
Copy and paste the code above into the code editor.
Simulate:

Once your circuit is set up and the code is ready, click "Start Simulation".
You should see the LEDs lighting up one after the other, creating the scrolling effect.
If the LEDs are scrolling too fast or too slow, adjust the value of delayTime in the code (e.g., change 300 to 500 or 100).
What to Observe:
Left-to-right scrolling: The LEDs will light up in sequence from LED1 to LED4.
Right-to-left scrolling: After LED4 lights up, the sequence will reverse, with LEDs lighting up from LED4 to LED1.
Feel free to let me know if you need further clarification on any step! Youâll be able to follow these steps tomorrow easily with everything laid out for you.
